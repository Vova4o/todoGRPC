// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: findtasks.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AllTasksServiceClient is the client API for AllTasksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllTasksServiceClient interface {
	AllTasks(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (AllTasksService_AllTasksClient, error)
}

type allTasksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAllTasksServiceClient(cc grpc.ClientConnInterface) AllTasksServiceClient {
	return &allTasksServiceClient{cc}
}

func (c *allTasksServiceClient) AllTasks(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (AllTasksService_AllTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &AllTasksService_ServiceDesc.Streams[0], "/nextdate.AllTasksService/AllTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &allTasksServiceAllTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AllTasksService_AllTasksClient interface {
	Recv() (*AllTasksResponse, error)
	grpc.ClientStream
}

type allTasksServiceAllTasksClient struct {
	grpc.ClientStream
}

func (x *allTasksServiceAllTasksClient) Recv() (*AllTasksResponse, error) {
	m := new(AllTasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AllTasksServiceServer is the server API for AllTasksService service.
// All implementations must embed UnimplementedAllTasksServiceServer
// for forward compatibility
type AllTasksServiceServer interface {
	AllTasks(*TaskRequest, AllTasksService_AllTasksServer) error
	mustEmbedUnimplementedAllTasksServiceServer()
}

// UnimplementedAllTasksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAllTasksServiceServer struct {
}

func (UnimplementedAllTasksServiceServer) AllTasks(*TaskRequest, AllTasksService_AllTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method AllTasks not implemented")
}
func (UnimplementedAllTasksServiceServer) mustEmbedUnimplementedAllTasksServiceServer() {}

// UnsafeAllTasksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllTasksServiceServer will
// result in compilation errors.
type UnsafeAllTasksServiceServer interface {
	mustEmbedUnimplementedAllTasksServiceServer()
}

func RegisterAllTasksServiceServer(s grpc.ServiceRegistrar, srv AllTasksServiceServer) {
	s.RegisterService(&AllTasksService_ServiceDesc, srv)
}

func _AllTasksService_AllTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AllTasksServiceServer).AllTasks(m, &allTasksServiceAllTasksServer{stream})
}

type AllTasksService_AllTasksServer interface {
	Send(*AllTasksResponse) error
	grpc.ServerStream
}

type allTasksServiceAllTasksServer struct {
	grpc.ServerStream
}

func (x *allTasksServiceAllTasksServer) Send(m *AllTasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AllTasksService_ServiceDesc is the grpc.ServiceDesc for AllTasksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllTasksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nextdate.AllTasksService",
	HandlerType: (*AllTasksServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AllTasks",
			Handler:       _AllTasksService_AllTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "findtasks.proto",
}
