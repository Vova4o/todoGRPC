// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: todo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoProtoServiceClient is the client API for TodoProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoProtoServiceClient interface {
	NextDate(ctx context.Context, in *NextDateRequest, opts ...grpc.CallOption) (*NextDateResponse, error)
	AllTasks(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (TodoProtoService_AllTasksClient, error)
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
}

type todoProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoProtoServiceClient(cc grpc.ClientConnInterface) TodoProtoServiceClient {
	return &todoProtoServiceClient{cc}
}

func (c *todoProtoServiceClient) NextDate(ctx context.Context, in *NextDateRequest, opts ...grpc.CallOption) (*NextDateResponse, error) {
	out := new(NextDateResponse)
	err := c.cc.Invoke(ctx, "/todoproto.TodoProtoService/NextDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoProtoServiceClient) AllTasks(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (TodoProtoService_AllTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoProtoService_ServiceDesc.Streams[0], "/todoproto.TodoProtoService/AllTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoProtoServiceAllTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoProtoService_AllTasksClient interface {
	Recv() (*AllTasksResponse, error)
	grpc.ClientStream
}

type todoProtoServiceAllTasksClient struct {
	grpc.ClientStream
}

func (x *todoProtoServiceAllTasksClient) Recv() (*AllTasksResponse, error) {
	m := new(AllTasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoProtoServiceClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, "/todoproto.TodoProtoService/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoProtoServiceServer is the server API for TodoProtoService service.
// All implementations must embed UnimplementedTodoProtoServiceServer
// for forward compatibility
type TodoProtoServiceServer interface {
	NextDate(context.Context, *NextDateRequest) (*NextDateResponse, error)
	AllTasks(*TaskRequest, TodoProtoService_AllTasksServer) error
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	mustEmbedUnimplementedTodoProtoServiceServer()
}

// UnimplementedTodoProtoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoProtoServiceServer struct {
}

func (UnimplementedTodoProtoServiceServer) NextDate(context.Context, *NextDateRequest) (*NextDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextDate not implemented")
}
func (UnimplementedTodoProtoServiceServer) AllTasks(*TaskRequest, TodoProtoService_AllTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method AllTasks not implemented")
}
func (UnimplementedTodoProtoServiceServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedTodoProtoServiceServer) mustEmbedUnimplementedTodoProtoServiceServer() {}

// UnsafeTodoProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoProtoServiceServer will
// result in compilation errors.
type UnsafeTodoProtoServiceServer interface {
	mustEmbedUnimplementedTodoProtoServiceServer()
}

func RegisterTodoProtoServiceServer(s grpc.ServiceRegistrar, srv TodoProtoServiceServer) {
	s.RegisterService(&TodoProtoService_ServiceDesc, srv)
}

func _TodoProtoService_NextDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoProtoServiceServer).NextDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoproto.TodoProtoService/NextDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoProtoServiceServer).NextDate(ctx, req.(*NextDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoProtoService_AllTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoProtoServiceServer).AllTasks(m, &todoProtoServiceAllTasksServer{stream})
}

type TodoProtoService_AllTasksServer interface {
	Send(*AllTasksResponse) error
	grpc.ServerStream
}

type todoProtoServiceAllTasksServer struct {
	grpc.ServerStream
}

func (x *todoProtoServiceAllTasksServer) Send(m *AllTasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoProtoService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoProtoServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoproto.TodoProtoService/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoProtoServiceServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoProtoService_ServiceDesc is the grpc.ServiceDesc for TodoProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoproto.TodoProtoService",
	HandlerType: (*TodoProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextDate",
			Handler:    _TodoProtoService_NextDate_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _TodoProtoService_AddTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AllTasks",
			Handler:       _TodoProtoService_AllTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todo.proto",
}
